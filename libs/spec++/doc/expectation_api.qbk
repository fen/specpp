[section Expectation API]

[h2 Equality]

[h4 Equal and Not equal ]

        value( <actual> ).should.equal( <expected> );
        value( <actual> ).should.not_equal( <expected> );

        value( <actual> ).should == <expected>;
        value( <actual> ).should != <expected>;

[h4 More than or less than]

        value( <actual> ).should.be_more_than( <expected> );
        value( <actual> ).should.be_less_than( <expected> );

        value( <actual> ).should < <expected>;
        value( <actual> ).should > <expected>;

[h4 Between or equal to]

        value( <actual> ).should.be_between( <lower_bound> ).And( <upper_bound> );
        value( <actual> ).should.not_be_between( <lower_bound> ).And( <upper_bound> );

        value( <actual> ).should.be_between( <lower_bound> ) && <upper_bound>;
        value( <actual> ).should.not_be_between( <lower_bound> ) && <upper_bound>;

        value( <actual> ).should.be_between_or_equal_to( <lower_bound> ).And( <upper_bound> );
        value( <actual> ).should.not_be_between_or_equal_to( <lower_bound> ).And( <upper_bound> );

        value( <actual> ).should.be_between_or_equal_to( <lower_bound> ) && <upper_bound>;
        value( <actual> ).should.not_be_between_or_equal_to( <lower_bound> ) && <upper_bound>;

[h2 Floating point comparition]

        value( <actual> ).should.be_close( <expected>, <tolerance> );
        value( <actual> ).should.not_be_close( <expected>, <tolerance> );

        value( <actual> ).should.be_within( <tolerance> ).of( <expected> );
        value( <actual> ).should.not_be_within( <tolerance> ).of( <expected> );

[h2 Pattern Matching]

        value( <value> ).should.match( <regex> );
        value( <value> ).should.not_match( <regex> );

[h2 Identity]

        value( <value> ).should.be( <type> );
        value( <value> ).should.not_be( <type> );

[endsect]
